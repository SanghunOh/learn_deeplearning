{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-30T13:43:49.190185Z","iopub.execute_input":"2024-10-30T13:43:49.191030Z","iopub.status.idle":"2024-10-30T13:43:49.602840Z","shell.execute_reply.started":"2024-10-30T13:43:49.190974Z","shell.execute_reply":"2024-10-30T13:43:49.601892Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import torch #파이토치 라이브러리\n#자주쓰이는 대부분의 python 11brary는 최신버전으로 이미 설치되어있음\ntorch.__version__","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:43:49.605005Z","iopub.execute_input":"2024-10-30T13:43:49.605520Z","iopub.status.idle":"2024-10-30T13:43:51.248723Z","shell.execute_reply.started":"2024-10-30T13:43:49.605477Z","shell.execute_reply":"2024-10-30T13:43:51.247812Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"'2.4.0'"},"metadata":{}}]},{"cell_type":"markdown","source":"## Tensor Attributes","metadata":{}},{"cell_type":"code","source":"# setting device on GPU if available, else CPU\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint( 'Using device:', device)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:43:51.249954Z","iopub.execute_input":"2024-10-30T13:43:51.250387Z","iopub.status.idle":"2024-10-30T13:43:51.290677Z","shell.execute_reply.started":"2024-10-30T13:43:51.250354Z","shell.execute_reply":"2024-10-30T13:43:51.289620Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Using device: cuda\n","output_type":"stream"}]},{"cell_type":"code","source":"# torch.tensor([[2], [2,3], [2,3,4]]) # error\ntorch.tensor([[2,2,3], [2,2,3], [2,3,4]])","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:45:21.062577Z","iopub.execute_input":"2024-10-30T13:45:21.063258Z","iopub.status.idle":"2024-10-30T13:45:21.099264Z","shell.execute_reply.started":"2024-10-30T13:45:21.063211Z","shell.execute_reply":"2024-10-30T13:45:21.098422Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"tensor([[2, 2, 3],\n        [2, 2, 3],\n        [2, 3, 4]])"},"metadata":{}}]},{"cell_type":"code","source":"x= torch.randn((10,5)) #표준정규분포 N(0, 1) 에서 sampling\nx","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:46:38.625059Z","iopub.execute_input":"2024-10-30T13:46:38.625470Z","iopub.status.idle":"2024-10-30T13:46:38.681300Z","shell.execute_reply.started":"2024-10-30T13:46:38.625436Z","shell.execute_reply":"2024-10-30T13:46:38.680445Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"tensor([[-0.2171, -0.0697, -0.7261,  0.9981, -1.6992],\n        [ 0.0862, -2.0969, -0.5084, -0.6496,  0.0283],\n        [-1.8348,  0.6329, -0.6672,  0.5533,  0.9170],\n        [-1.0104, -1.1871, -0.7134,  1.4266,  0.2259],\n        [-0.9408, -0.6155, -1.3365,  2.0484,  0.3585],\n        [-0.6271, -1.7182,  0.9095,  0.5434,  1.3554],\n        [-0.3657,  0.6419, -0.1666,  1.1087, -1.1899],\n        [ 1.3658,  0.6489, -1.1771,  0.4906,  1.9485],\n        [-0.8628,  0.0627,  0.3489,  0.2809, -2.0874],\n        [-0.9693, -1.1493, -0.1082, -0.0376, -1.9190]])"},"metadata":{}}]},{"cell_type":"code","source":"print(x.shape)\nprint(x.size())\nprint(x.size(0))","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:46:54.548469Z","iopub.execute_input":"2024-10-30T13:46:54.548877Z","iopub.status.idle":"2024-10-30T13:46:54.554085Z","shell.execute_reply.started":"2024-10-30T13:46:54.548840Z","shell.execute_reply":"2024-10-30T13:46:54.553198Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"torch.Size([10, 5])\ntorch.Size([10, 5])\n10\n","output_type":"stream"}]},{"cell_type":"code","source":"print(x.dtype)\nprint(x.device)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:47:09.257773Z","iopub.execute_input":"2024-10-30T13:47:09.258194Z","iopub.status.idle":"2024-10-30T13:47:09.263327Z","shell.execute_reply.started":"2024-10-30T13:47:09.258150Z","shell.execute_reply":"2024-10-30T13:47:09.262471Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"torch.float32\ncpu\n","output_type":"stream"}]},{"cell_type":"code","source":"#tensor attributes #I: https://pytorch.org/docs/stable/tensor_attributes.html\nx = x.to ('cuda') #x.cuda()\nprint(x.device)\nx= x.to(torch.int32) #x.int()\nprint(x.dtype)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:47:53.515570Z","iopub.execute_input":"2024-10-30T13:47:53.516444Z","iopub.status.idle":"2024-10-30T13:47:53.695507Z","shell.execute_reply.started":"2024-10-30T13:47:53.516401Z","shell.execute_reply":"2024-10-30T13:47:53.694336Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"cuda:0\ntorch.int32\n","output_type":"stream"}]},{"cell_type":"code","source":"y = torch.randn((10,5), dtype=torch.half)\nprint (x + y)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:48:07.221273Z","iopub.execute_input":"2024-10-30T13:48:07.221921Z","iopub.status.idle":"2024-10-30T13:48:07.287014Z","shell.execute_reply.started":"2024-10-30T13:48:07.221879Z","shell.execute_reply":"2024-10-30T13:48:07.285813Z"},"trusted":true},"execution_count":17,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","Cell \u001b[0;32mIn[17], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m y \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mrandn((\u001b[38;5;241m10\u001b[39m,\u001b[38;5;241m5\u001b[39m), dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mhalf)\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28mprint\u001b[39m (\u001b[43mx\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m)\n","\u001b[0;31mRuntimeError\u001b[0m: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!"],"ename":"RuntimeError","evalue":"Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!","output_type":"error"}]},{"cell_type":"code","source":"y.device  # 다른 메모리(cpu, gpu) 값 사용으로 위와 같은 error 발생","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:51:05.669768Z","iopub.execute_input":"2024-10-30T13:51:05.670493Z","iopub.status.idle":"2024-10-30T13:51:05.676108Z","shell.execute_reply.started":"2024-10-30T13:51:05.670453Z","shell.execute_reply":"2024-10-30T13:51:05.675239Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"device(type='cpu')"},"metadata":{}}]},{"cell_type":"code","source":" # 사용 가이드\ntorch.randn?","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:55:33.652497Z","iopub.execute_input":"2024-10-30T13:55:33.652878Z","iopub.status.idle":"2024-10-30T13:55:33.657910Z","shell.execute_reply.started":"2024-10-30T13:55:33.652841Z","shell.execute_reply":"2024-10-30T13:55:33.656833Z"},"jupyter":{"outputs_hidden":true},"collapsed":true,"trusted":true},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[0;31mDocstring:\u001b[0m\nrandn(*size, *, generator=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False) -> Tensor\n\n\nReturns a tensor filled with random numbers from a normal distribution\nwith mean `0` and variance `1` (also called the standard normal\ndistribution).\n\n.. math::\n    \\text{out}_{i} \\sim \\mathcal{N}(0, 1)\n\nFor complex dtypes, the tensor is i.i.d. sampled from a `complex normal distribution`_ with zero mean and\nunit variance as\n\n.. math::\n    \\text{out}_{i} \\sim \\mathcal{CN}(0, 1)\n\nThis is equivalent to separately sampling the real :math:`(\\operatorname{Re})` and imaginary\n:math:`(\\operatorname{Im})` part of :math:`\\text{out}_i` as\n\n.. math::\n    \\operatorname{Re}(\\text{out}_{i}) \\sim \\mathcal{N}(0, \\frac{1}{2}),\\quad\n    \\operatorname{Im}(\\text{out}_{i}) \\sim \\mathcal{N}(0, \\frac{1}{2})\n\nThe shape of the tensor is defined by the variable argument :attr:`size`.\n\n\nArgs:\n    size (int...): a sequence of integers defining the shape of the output tensor.\n        Can be a variable number of arguments or a collection like a list or tuple.\n\nKeyword args:\n    generator (:class:`torch.Generator`, optional): a pseudorandom number generator for sampling\n    out (Tensor, optional): the output tensor.\n    dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n        Default: if ``None``, uses a global default (see :func:`torch.set_default_dtype`).\n    layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.\n        Default: ``torch.strided``.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n        Default: if ``None``, uses the current device for the default tensor type\n        (see :func:`torch.set_default_device`). :attr:`device` will be the CPU\n        for CPU tensor types and the current CUDA device for CUDA tensor types.\n    requires_grad (bool, optional): If autograd should record operations on the\n        returned tensor. Default: ``False``.\n    pin_memory (bool, optional): If set, returned tensor would be allocated in\n        the pinned memory. Works only for CPU tensors. Default: ``False``.\n\nExample::\n\n    >>> torch.randn(4)\n    tensor([-2.1436,  0.9966,  2.3426, -0.6366])\n    >>> torch.randn(2, 3)\n    tensor([[ 1.5954,  2.8929, -1.0923],\n            [ 1.1719, -0.4709, -0.1996]])\n\n.. _complex normal distribution: https://en.wikipedia.org/wiki/Complex_normal_distribution\n\u001b[0;31mType:\u001b[0m      builtin_function_or_method"},"metadata":{}}]},{"cell_type":"code","source":"y = y.cuda()\nprint(x + y)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:58:19.322589Z","iopub.execute_input":"2024-10-30T13:58:19.322975Z","iopub.status.idle":"2024-10-30T13:58:19.333827Z","shell.execute_reply.started":"2024-10-30T13:58:19.322937Z","shell.execute_reply":"2024-10-30T13:58:19.332351Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"tensor([[ 2.9224e-01, -7.5391e-01,  6.9873e-01, -1.4912e+00, -3.5645e-02],\n        [-4.7485e-01, -1.7285e+00, -7.8711e-01, -4.0332e-01, -4.2041e-01],\n        [-1.4648e-03,  4.3262e-01, -3.3472e-01,  2.2266e-01, -1.4414e+00],\n        [-9.4238e-01, -9.0674e-01, -1.5635e+00,  1.6689e+00,  7.4854e-01],\n        [ 3.2642e-01, -5.1904e-01, -1.6465e+00,  9.6094e-01, -1.6357e-01],\n        [ 1.4365e+00, -2.8555e+00, -1.3757e-01,  9.3115e-01,  2.3086e+00],\n        [-6.9189e-01, -1.2324e+00,  1.3220e-01, -9.3750e-02,  2.3242e-01],\n        [ 8.3105e-01, -2.5664e+00,  1.3066e+00, -1.1133e+00,  8.9355e-02],\n        [-1.9434e-01, -6.8652e-01, -6.5723e-01,  1.2666e+00, -1.1514e+00],\n        [-1.6699e-01, -2.2344e+00, -2.1277e-01,  6.1914e-01, -6.0449e-01]],\n       device='cuda:0', dtype=torch.float16)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(y.t()) #transpose tensor \nprint(y.T.size()) #transpose tensor","metadata":{"execution":{"iopub.status.busy":"2024-10-30T13:59:28.710871Z","iopub.execute_input":"2024-10-30T13:59:28.711510Z","iopub.status.idle":"2024-10-30T13:59:28.720208Z","shell.execute_reply.started":"2024-10-30T13:59:28.711467Z","shell.execute_reply":"2024-10-30T13:59:28.719281Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"tensor([[ 0.2922, -0.4749,  0.9985,  0.0577,  0.3264,  1.4365, -0.6919, -0.1687,\n         -0.1943, -0.1670],\n        [-0.7539,  0.2712,  0.4326,  0.0933, -0.5190, -1.8545, -1.2324, -2.5664,\n         -0.6865, -1.2344],\n        [ 0.6987, -0.7871, -0.3347, -1.5635, -0.6465, -0.1376,  0.1322,  2.3066,\n         -0.6572, -0.2128],\n        [-1.4912, -0.4033,  0.2227,  0.6689, -1.0391,  0.9312, -1.0938, -1.1133,\n          1.2666,  0.6191],\n        [ 0.9644, -0.4204, -1.4414,  0.7485, -0.1636,  1.3096,  1.2324, -0.9106,\n          0.8486,  0.3953]], device='cuda:0', dtype=torch.float16)\ntorch.Size([5, 10])\n","output_type":"stream"}]},{"cell_type":"code","source":"print(x.size(), y.t().size())\nprint(x @ y.t()) #torch.matmul(x,y.t))","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:00:12.178564Z","iopub.execute_input":"2024-10-30T14:00:12.179263Z","iopub.status.idle":"2024-10-30T14:00:12.227958Z","shell.execute_reply.started":"2024-10-30T14:00:12.179206Z","shell.execute_reply":"2024-10-30T14:00:12.226782Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"torch.Size([10, 5]) torch.Size([5, 10])\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","Cell \u001b[0;32mIn[44], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28mprint\u001b[39m(x\u001b[38;5;241m.\u001b[39msize(), y\u001b[38;5;241m.\u001b[39mt()\u001b[38;5;241m.\u001b[39msize())\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mx\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m@\u001b[39;49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mt\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m) \u001b[38;5;66;03m#torch.matmul(x,y.t))\u001b[39;00m\n","\u001b[0;31mRuntimeError\u001b[0m: expected mat1 and mat2 to have the same dtype, but got: int != c10::Half"],"ename":"RuntimeError","evalue":"expected mat1 and mat2 to have the same dtype, but got: int != c10::Half","output_type":"error"}]},{"cell_type":"code","source":"print(x.half() @ y.t())","metadata":{"execution":{"iopub.status.busy":"2024-10-30T14:01:28.250048Z","iopub.execute_input":"2024-10-30T14:01:28.251063Z","iopub.status.idle":"2024-10-30T14:01:28.354653Z","shell.execute_reply.started":"2024-10-30T14:01:28.251011Z","shell.execute_reply":"2024-10-30T14:01:28.353705Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"tensor([[-0.9644,  0.4204,  1.4414, -0.7485,  0.1636, -1.3096, -1.2324,  0.9106,\n         -0.8486, -0.3953],\n        [ 1.5078, -0.5425, -0.8652, -0.1865,  1.0381,  3.7090,  2.4648,  5.1328,\n          1.3730,  2.4688],\n        [-0.2922,  0.4749, -0.9985, -0.0577, -0.3264, -1.4365,  0.6919,  0.1687,\n          0.1943,  0.1670],\n        [-1.0293, -0.1997, -1.2090,  0.5181, -0.8467,  1.3496,  0.8306,  1.6221,\n          2.1484,  2.0195],\n        [-3.6816, -0.0195,  0.7803,  2.9023, -1.4316,  2.0000, -2.3203, -4.5312,\n          3.1914,  1.4512],\n        [ 1.7188, -0.6914, -1.8740,  0.6553,  0.3555,  3.1641,  2.4648,  1.6562,\n          1.5352,  1.6299],\n        [-2.4551,  0.0171,  1.6641, -0.0796, -0.8755, -0.3784, -2.3262, -0.2026,\n          0.4180,  0.2239],\n        [ 0.5576, -0.1082, -0.1082,  2.3691,  0.8096,  2.8828,  0.4082, -3.3867,\n          1.3115,  0.4409],\n        [-1.9287,  0.8408,  2.8828, -1.4971,  0.3271, -2.6191, -2.4648,  1.8213,\n         -1.6973, -0.7905],\n        [-0.2104,  0.1492,  1.0088, -0.8418,  0.6826,  0.5449,  0.0000,  3.4766,\n         -0.1621,  0.8389]], device='cuda:0', dtype=torch.float16)\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}