{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-31T13:19:11.363469Z","iopub.execute_input":"2024-10-31T13:19:11.364186Z","iopub.status.idle":"2024-10-31T13:19:11.743263Z","shell.execute_reply.started":"2024-10-31T13:19:11.364148Z","shell.execute_reply":"2024-10-31T13:19:11.742269Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import torch #파이토치 라이브러리\n#자주쓰이는 대부분의 python 11brary는 최신버전으로 이미 설치되어있음\ntorch.__version__","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:11.745477Z","iopub.execute_input":"2024-10-31T13:19:11.745992Z","iopub.status.idle":"2024-10-31T13:19:15.058379Z","shell.execute_reply.started":"2024-10-31T13:19:11.745948Z","shell.execute_reply":"2024-10-31T13:19:15.057529Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"'2.4.0'"},"metadata":{}}]},{"cell_type":"markdown","source":"## Tensor Attributes","metadata":{}},{"cell_type":"code","source":"# setting device on GPU if available, else CPU\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint( 'Using device:', device)","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.059434Z","iopub.execute_input":"2024-10-31T13:19:15.059850Z","iopub.status.idle":"2024-10-31T13:19:15.098690Z","shell.execute_reply.started":"2024-10-31T13:19:15.059816Z","shell.execute_reply":"2024-10-31T13:19:15.097610Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Using device: cuda\n","output_type":"stream"}]},{"cell_type":"code","source":"# torch.tensor([[2], [2,3], [2,3,4]]) # error\ntorch.tensor([[2,2,3], [2,2,3], [2,3,4]])","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.099808Z","iopub.execute_input":"2024-10-31T13:19:15.100105Z","iopub.status.idle":"2024-10-31T13:19:15.151242Z","shell.execute_reply.started":"2024-10-31T13:19:15.100073Z","shell.execute_reply":"2024-10-31T13:19:15.150415Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"tensor([[2, 2, 3],\n        [2, 2, 3],\n        [2, 3, 4]])"},"metadata":{}}]},{"cell_type":"code","source":"x= torch.randn((10,5)) #표준정규분포 N(0, 1) 에서 sampling\nx","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.153503Z","iopub.execute_input":"2024-10-31T13:19:15.153838Z","iopub.status.idle":"2024-10-31T13:19:15.208899Z","shell.execute_reply.started":"2024-10-31T13:19:15.153804Z","shell.execute_reply":"2024-10-31T13:19:15.208105Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"tensor([[-1.9911,  1.4430,  1.4905, -0.7566,  1.6838],\n        [-0.2750,  0.7504, -0.4669, -1.5767,  0.0614],\n        [ 0.7477, -1.0257, -1.1915, -0.2619, -1.3271],\n        [ 0.7279,  0.7745, -1.0922, -1.3421, -0.0256],\n        [ 0.6793, -1.3944,  0.4150,  0.8316, -1.1123],\n        [ 0.9064, -1.8011, -0.4360,  0.6274,  1.0579],\n        [-0.6345, -1.6063, -0.0669, -0.0968,  2.1846],\n        [-0.6794,  0.8648,  1.3377, -0.4208,  1.2679],\n        [-0.5209, -0.7421, -1.8816, -0.5881, -0.3683],\n        [ 1.1019, -0.6753, -0.6496,  0.6928, -1.4125]])"},"metadata":{}}]},{"cell_type":"code","source":"print(x.shape)\nprint(x.size())\nprint(x.size(0))","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.209876Z","iopub.execute_input":"2024-10-31T13:19:15.210172Z","iopub.status.idle":"2024-10-31T13:19:15.215137Z","shell.execute_reply.started":"2024-10-31T13:19:15.210140Z","shell.execute_reply":"2024-10-31T13:19:15.214353Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"torch.Size([10, 5])\ntorch.Size([10, 5])\n10\n","output_type":"stream"}]},{"cell_type":"code","source":"print(x.dtype)\nprint(x.device)","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.216290Z","iopub.execute_input":"2024-10-31T13:19:15.216601Z","iopub.status.idle":"2024-10-31T13:19:15.224775Z","shell.execute_reply.started":"2024-10-31T13:19:15.216547Z","shell.execute_reply":"2024-10-31T13:19:15.223870Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"torch.float32\ncpu\n","output_type":"stream"}]},{"cell_type":"code","source":"#tensor attributes #I: https://pytorch.org/docs/stable/tensor_attributes.html\nx = x.to ('cuda') #x.cuda()\nprint(x.device)\nx= x.to(torch.int32) #x.int()\nprint(x.dtype)","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.225819Z","iopub.execute_input":"2024-10-31T13:19:15.226165Z","iopub.status.idle":"2024-10-31T13:19:15.406326Z","shell.execute_reply.started":"2024-10-31T13:19:15.226124Z","shell.execute_reply":"2024-10-31T13:19:15.405429Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"cuda:0\ntorch.int32\n","output_type":"stream"}]},{"cell_type":"code","source":"y = torch.randn((10,5), dtype=torch.half)\nprint (x + y)","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.407532Z","iopub.execute_input":"2024-10-31T13:19:15.407904Z","iopub.status.idle":"2024-10-31T13:19:15.689500Z","shell.execute_reply.started":"2024-10-31T13:19:15.407869Z","shell.execute_reply":"2024-10-31T13:19:15.688097Z"},"trusted":true},"execution_count":9,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","Cell \u001b[0;32mIn[9], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m y \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mrandn((\u001b[38;5;241m10\u001b[39m,\u001b[38;5;241m5\u001b[39m), dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mhalf)\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28mprint\u001b[39m (\u001b[43mx\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m)\n","\u001b[0;31mRuntimeError\u001b[0m: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!"],"ename":"RuntimeError","evalue":"Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!","output_type":"error"}]},{"cell_type":"code","source":"y.device  # 다른 메모리(cpu, gpu) 값 사용으로 위와 같은 error 발생","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.690651Z","iopub.status.idle":"2024-10-31T13:19:15.691138Z","shell.execute_reply.started":"2024-10-31T13:19:15.690882Z","shell.execute_reply":"2024-10-31T13:19:15.690908Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":" # 사용 가이드\ntorch.randn?","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.693285Z","iopub.status.idle":"2024-10-31T13:19:15.693879Z","shell.execute_reply.started":"2024-10-31T13:19:15.693591Z","shell.execute_reply":"2024-10-31T13:19:15.693620Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y = y.cuda()\nprint(x + y)","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.695301Z","iopub.status.idle":"2024-10-31T13:19:15.695797Z","shell.execute_reply.started":"2024-10-31T13:19:15.695530Z","shell.execute_reply":"2024-10-31T13:19:15.695556Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y.t()) #transpose tensor \nprint(y.T.size()) #transpose tensor","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.696926Z","iopub.status.idle":"2024-10-31T13:19:15.697390Z","shell.execute_reply.started":"2024-10-31T13:19:15.697145Z","shell.execute_reply":"2024-10-31T13:19:15.697170Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(x.size(), y.t().size())\nprint(x @ y.t()) #torch.matmul(x,y.t))","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.699049Z","iopub.status.idle":"2024-10-31T13:19:15.699406Z","shell.execute_reply.started":"2024-10-31T13:19:15.699233Z","shell.execute_reply":"2024-10-31T13:19:15.699251Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(x.half() @ y.t())","metadata":{"execution":{"iopub.status.busy":"2024-10-31T13:19:15.700217Z","iopub.status.idle":"2024-10-31T13:19:15.700548Z","shell.execute_reply.started":"2024-10-31T13:19:15.700378Z","shell.execute_reply":"2024-10-31T13:19:15.700396Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}